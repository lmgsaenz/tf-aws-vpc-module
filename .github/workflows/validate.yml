name: "Validate & TFSec & Terratest"
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, reopened, synchronize]

env:
  TF_VERSION: 1.5.7
  TG_VERSION: v0.50.17
  GO_VERSION: 1.21.1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
  GITHUB_TOKEN: ${{ github.token }}
  WORKING_DIR: examples
  TERRATEST_DIR: tests

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  terraform:
    name: Terraform Validate
    runs-on: ubuntu-22.04
  
    permissions:
      contents: read
      pull-requests: write
  
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Get and Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: $TF_VERSION
    
    - name: Install Terragrunt
      run: |
        curl -s -qL -o terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/$TG_VERSION/terragrunt_linux_amd64
        chmod +x terragrunt
        sudo mv terragrunt /bin
    
    - name: Terragrunt Init
      id: init
      run: terragrunt run-all init

    - name: Post Init
      if: always() && github.ref != 'refs/heads/master' && (steps.init.outcome == 'success' || steps.init.outcome == 'failure')
      uses: GetTerminus/terraform-pr-commenter@v3
      with:
        commenter_type: init
        commenter_input: ${{ format('{0}{1}', steps.init.outputs.stdout, steps.init.outputs.stderr) }}
        commenter_exitcode: ${{ steps.init.outputs.exitcode }}

    - name: Terragrunt Validate
      id: validate
      run: terragrunt run-all validate
      continue-on-error: true

    - name: Post Validate
      if: always() && github.ref != 'refs/head/master' && (steps.validate.outcome == 'success' || steps.validate.outcome == 'failure')
      uses: GetTerminus/terraform-pr-commenter@v3
      with:
        commenter_type: validate
        commenter_input: ${{ format('{0}{1}', steps.validate.outputs.stdout, steps.validate.outputs.stderr) }}
        commenter_exitcode: ${{ steps.validate.outputs.exitcode}}
    
    - name: Terragrunt format
      id: fmt
      run: terragrunt fmt -check -recursive -diff
      continue-on-error: false

    - name: Post Format
      if: always() && github.ref != 'refs/heads/master' && (steps.fmt.outcome == 'success' || steps.fmt.outcome == 'failure')
      uses: GetTerminus/terraform-pr-commenter@v3
      with:
        commenter_type: fmt
        commenter_input: ${{ format('{0}{1}', steps.fmt.outputs.stdout, steps.fmt.outputs.stderr) }}
        commenter_exitcode: ${{ steps.fmt.outputs.exitcode }}
    
  test:
    name: TFSec
    needs: [terraform]
    runs-on: ubuntu-22.04

    permissions:
      contents: read
      pull-requests: write
  
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Get and Report TFSec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          format: junit
          working_directory: ${{ env.WORKING_DIR }}
        continue-on-error: true

      - name: Post TFSec Report
        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
        with:
          github_token: ${{ github.token }}
          tfsec_formats: junit
          soft_fail_commenter: true
  
  terratest:
    name: Terratest
    needs: [terraform]
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get and Setup go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Terratest test
        working-directory: ${{ env.TERRATEST_DIR }}
        run: |
          go mod init ${{ github.event.repository.name }}
          go mod tidy
          go install github.com/jstemmer/go-junit-report@latest
          go test -v 2>&1 ./... | go-junit-report -set-exit-code > report.xml
      
      - name: Post Test Summary
        if: always()
        uses: test-summary/action@v2
        with:
          paths: ${{ env.TERRATEST_DIR }}/report.xml
